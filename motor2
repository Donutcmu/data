#define STEPPER_PIN_1 16
#define STEPPER_PIN_2 17
#define STEPPER_PIN_3 18
#define STEPPER_PIN_4 19
#define BUTTON_PIN 2  // Button pin

int step_number = 0;
int buttonState = 0;   
int lastButtonState = 0;  
int stage = 0;         // Stage variable to control rotation steps

const int stepsPer90Degree = 512;

void setup() {
  pinMode(STEPPER_PIN_1, OUTPUT);
  pinMode(STEPPER_PIN_2, OUTPUT);
  pinMode(STEPPER_PIN_3, OUTPUT);
  pinMode(STEPPER_PIN_4, OUTPUT);
  pinMode(BUTTON_PIN, INPUT);
  
  Serial.begin(9600);  // Start serial communication for debugging
}

void loop() {
  // Read the current state of the button
  buttonState = digitalRead(BUTTON_PIN);

  // Check if the button was pressed (change from LOW to HIGH)
  if (buttonState == HIGH && lastButtonState == LOW) {
    // Debounce delay to avoid multiple presses
    delay(50);
    
    // Increment the stage and reset after stage 3
    stage++;
    if (stage > 3) {
      stage = 0;
    }

    // Rotate motor by the appropriate number of steps
    rotateToStage(stage);

    // Print the current stage for debugging
    Serial.print("Stage: ");
    
    Serial.println(stage);
  }

  // Save the current button state for the next loop
  lastButtonState = buttonState;
}

void rotateToStage(int stage) {

 

  // Rotate the motor by the calculated number of steps
  for (int i = 0; i < stepsPer90Degree; i++) {
    OneStep(true);  // Rotate in the forward direction
    delay(2);       // Adjust delay for motor speed
  }
  stage++;
  if (stage > 3) {
    stage = 0;  // Reset to stage 0 after reaching stage 3
  }
}

// Function to control the stepper motor by one step
void OneStep(bool dir) {
  if (dir) {
    switch (step_number) {
      case 0:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
    }
  } else {
    switch (step_number) {
      case 0:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
    }
  }

  step_number++;
  if (step_number > 3) {
    step_number = 0;
  }
}
