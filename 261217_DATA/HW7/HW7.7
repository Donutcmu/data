public class AVLTree extends BTreePrinter{
    Node root;

    public AVLTree(Node root){
        this.root = root;
        root.parent = null; // Clear parent of the root (Important for spliting)
    }
    
    public void singleRotateFromLeft(Node y) {
      Node x = y.left;
      Node w = y.parent;
      y.left = x.right;
      if(y.left != null)
        y.left.parent = y;
      x.right = y;
      y.parent = x;
      if(y == root)
        root = x;
      else
      {
        if(w != null)
        {
            if(w.left == y)
                w.left = x;
            else
                w.right = x;
        }
        x.parent = w;
      }
    }
    
    public void singleRotateFromRight(Node y) {
      Node x = y.right;
      Node w = y.parent;
      y.right = x.left;
      if(y.right != null)
        y.right.parent = y;
      x.left = y;
      y.parent = x;
      if(y == root)
        root = x;
      else
      {
        if(w != null)
        {
            if(w.right == y)
                w.right = x;
            else
                w.left = x;
        }
        x.parent = w;
      }
    }
    
    public void doubleRotateFromLeft(Node y) {
      Node x = y.left;
      Node z = x.right;
      Node w = y.parent;
      
      x.right = z.left;
        if(x.right != null)
          x.right.parent = x;
        z.left = x;
        z.parent = x;
          if(y != null)
          {
              if(y.right == x)
                  y.right = z;
              else
                  y.left = z;
          }
          z.parent = y;

      y.left = z.right;
      if(y.left != null)
        y.left.parent = y;
      z.right = y;
      y.parent = z;
      if(y == root)
        root = z;
      else
      {
        if(w != null)
        {
            if(w.left == y)
                w.left = z;
            else
                w.right = z;
        }
        z.parent = w;
      }
    }
    
    public void doubleRotateFromRight(Node y) {
      Node x = y.right;
      Node z = x.left;
      Node w = y.parent;
      
      x.left = z.right;
        if(x.left != null)
          x.left.parent = x;
        z.right = x;
        z.parent = x;
          if(y != null)
          {
              if(y.left == x)
                  y.left = z;
              else
                  y.right = z;
          }
          z.parent = y;

      y.right = z.left;
      if(y.right != null)
        y.right.parent = y;
      z.left = y;
      y.parent = z;
      if(y == root)
        root = z;
      else
      {
        if(w != null)
        {
            if(w.right == y)
                w.right = z;
            else
                w.left = z;
        }
        z.parent = w;
      }
    }
    
    public static void rebalance(AVLTree tree, Node node){
        int balanceFactor = height(node.left) - height(node.right);              // Calculate balanceFactor
            if (Math.abs(balanceFactor) > 1){                          // Use balanceFactor to check if unbalanced?
                if (balanceFactor > 1){                      // Use balanceFactor to check if left heavy?
                    if (height(node.left.left) >= height(node.left.right)){                  // Use the grandchild to check if Outer or Inner?
                        System.out.println("Perform SingleRotationFromLeft(Node " + node.key +")");   // Fix ??? and call a function
                        tree.singleRotateFromLeft(node);
                    }else{
                        System.out.println("Perform DoubleRotationFromLeft(Node " + node.key +")");   // Fix ??? and call a function
                        tree.doubleRotateFromLeft(node);
                    }
                }else{
                    if (height(node.right.right) >= height(node.right.left)){                  // Use the grandchild to check if Outer or Inner?
                        System.out.println("Perform SingleRotationFromRight(Node " + node.key +")");   // Fix this and call a function
                        tree.singleRotateFromRight(node);
                    }else{
                        System.out.println("Perform DoubleRotationFromRight(Node " + node.key +")");   // Fix this and call a function
                        tree.doubleRotateFromRight(node);
                    }
                }
            }
    }
    
    
    public static Node findKey(Node node, int search_key) {
      if(node == null) 
      {
          return null;
          //ถ้าnodeว่างจะทำการreturn nullกลับไป
      }
      
      if(node.key == search_key) 
      {
          return node;
          //ถ้าเจอnodeที่มีkey=search_keyแล้วจะreturn nodeนี้ออกไป
      }
      if(node.key > search_key)  
      {
          return findKey(node.left, search_key);
          //ถ้าkeyของตัวนี้มีค่ามากกว่าsearch_keyให้เรียกตัวเองอีกครั้งโดยnodeที่ใส่เข้าไปจะเป็นnodeทางซ้าย
          //เพราะจะได้เจอกับnodeที่มีkeyน้อยลง
      } 
      else
      {
          return findKey(node.right, search_key);
          //ถ้าkeyของตัวนี้มีค่าน้อยกว่าsearch_keyให้เรียกตัวเองอีกครั้งโดยnodeที่ใส่เข้าไปจะเป็นnodeขวา
          //เพราะจะได้เจอกับnodeที่มีkeyมากกว่าkeyปัจจุบัน
      }
    }

    public static Node findMin(Node node){
        if(node.left != null)
        {
            return findMin(node.left);
            //ถ้าลูกทางซ้ายของtreeยังมีอยู่ก็ให้เรียกใช้ตัวเองต่อ
            //ที่ต้องเรียกทางซ้ายไปเรื่อยๆก็เพราะตามBTแล้วค่าที่น้อยที่สุดจะอยู่ทางซ้าย

        }
        else
        {
            return node;
            //ถ้าลูกของnodeทางซ้าย=null ก็จะทำการreturn nodeนี้ออกไปเพราะnodeนี้คือตัวที่อยู่ท้ายสุดแล้ว
        }
    }

    public static Node findMax(Node node){
        if(node.right != null)
        {
            return findMax(node.right);
            //ถ้าลูกทางขวาของnodeปัจจุบันยังมีอยู่ก็ให้เรียกใช้ฟังก์ชันนี้อีกรอบโดยใส่nodeลูกของทางขวาของnodeปัจจุบันเข้าไป
            //ต้องเรียกไปทางขวาเรื่อยๆก็เพราะว่าจามBTแล้วค่าที่มากที่สุดจะอยู่ทางขวา
        }
        else{
          return node;
            //หมายความว่าตัวนี้คือตัวที่อยู่ขวาสุดแล้วมีค่ามากที่สุดแล้วให้return nodeนี้กลับไป
        }
    }

    public void insertKey(int key) {
        if (root == null) {
            root = new Node(key);
        } else {
            insertKey(this,root, key); 
        }
    }

    public static void insertKey(AVLTree tree, Node node, int key) {
        if (key == node.key) 
        {
            System.out.println("Duplicated key:" + key);
        }
        else if (key < node.key) 
        {
            if (node.left == null) 
            {
                node.left = new Node(key);
                node.left.parent = node;
            }
            else 
            {
                insertKey(tree, node.left, key);
            }
            
        }
        else
        { 
            if (node.right == null) 
            {
                node.right = new Node(key);
                node.right.parent = node;
            }
            else 
            {
                insertKey(tree, node.right, key);
            }
        }
        rebalance(tree,node);
    
    }
    
    public void deleteKey(int key) {
        if (root == null) 
        {
            System.out.println("Empty Tree!!!");
            return;
        }
      
        Node node = findKey(root,key); 
        if (node == null) 
        {
            System.out.println("Key not found!!!");
            return; 
        }
    
        if (node == root) 
        {
            if (root.left == null && root.right == null) 
            {
                root = null;
            }
            else if (root.left != null && root.right == null) 
            {
                root = root.left;
                root.parent = null;
            }
            else if (root.right != null && root.left == null) 
            {
                root = root.right;
                root.parent = null;
            }
            else 
            {
                Node minNode = findMin(root.right); 
                root.key = minNode.key; 
                deleteKey(this,minNode);  
            }
            
        } 
        else 
        {
            deleteKey(this,node);
        }
        rebalance(this, root);
    }
    
    public static void deleteKey(AVLTree tree, Node node){
        if (node.left == null && node.right == null) 
          {
            if (node == node.parent.left) 
            {
                node.parent.left = null; 
            } 
            else 
            {
                node.parent.right = null; 
            }
          }
          else if (node.left != null && node.right == null) 
          {
              if (node == node.parent.left) 
              {
                  node.parent.left = node.left; 
              } 
              else 
              {
                  node.parent.right = node.left;
              }
              node.left.parent = node.parent;
          }
          else if (node.right != null && node.left == null) 
          {
              if (node == node.parent.left) 
              {
                  node.parent.left = node.right; 
              } 
              else 
              {
                  node.parent.right = node.right;
              }
              node.right.parent = node.parent;
          }
          else 
          {
              Node minNode = findMin(node.right);
              node.key = minNode.key;
              deleteKey(tree,minNode);
          }
          
          while(node.parent != null)
          {
              rebalance(tree, node.parent);
              node = node.parent;
              if(node.parent.parent == null)
                break;
          }
    }
    
    public static boolean isMergeable(Node r1, Node r2){
        if(findMax(r1).key < findMin(r2).key)
            return true;
        else
            return false;
    }

    public static Node mergeWithRoot(Node r1, Node r2, Node t){
        if (isMergeable(r1, r2)) {
            if(Math.abs(height(r1)-height(r2)) <= 1)
            {
                t.left = r1;
                t.right = r2;
                r1.parent = t;
                r2.parent = t;
                return t;
            }
            else if(height(r1) > height(r2))
            {
                AVLTree tree = new AVLTree(t);
                tree.root = mergeWithRoot(r1.right,r2,t);
                r1.right = tree.root;
                tree.root.parent = r1;
                rebalance(tree,r1);
                return r1.parent;
            }
            else
            {
                AVLTree tree = new AVLTree(t);
                tree.root = mergeWithRoot(r1,r2.left,t);
                r2.left = tree.root;
                tree.root.parent = r2;
                rebalance(tree,r2);
                return r2.parent;
            }
            
        } else {
            System.out.println("All nodes in T1 must be smaller than all nodes from T2");
            return null;
        }
    }
    
    // Fix this function
    public Node[] split(int key){
        return split(this.root, key); // This is incorrect, fix this by calling the static split
    }
    
    // Fix this function
    public static Node[] split(Node r, int key){ 
        Node[] arr = new Node[2];
        if(r == null)
        {
            arr[0] = null;
            arr[1] = null;
            return arr;
        }
        else if(key > r.key)
        {
            Node[] splited = split(r.left,key);
            
            Node r3 = mergeWithRoot(splited[1],r.right,r);
            arr[0] = splited[0];
            arr[1] = r3;
            return arr;
        }
        else
        {
            Node[] splited = split(r.right,key);
            
            Node r4 = mergeWithRoot(r.left,splited[0],r);
            arr[0] = r4;
            arr[1] = splited[1];
            return arr;
        }
    }

    // This function is complete, no need to edit
    public static int height(Node node){
        if (node == null)
            return -1;
        else
            return 1 + Math.max(height(node.left), height(node.right));
    }

    // This function is complete, no need to edit
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }
    
    public AVLTree() {} // Dummy Constructor, no need to edit

}
