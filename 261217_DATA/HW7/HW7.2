public class BSTree extends BTreePrinter{
    Node root;
      
    public void doubleRotateFromLeft(Node y) {
        // Do something
      Node x = y.left;//ให้ x มีค่าเท่ากับnodeทางซ้ายของy
      Node z = x.right;//ให้ z มีค่าเท่ากับnodeทางขวาของx
      Node w = y.parent;//ให้node w ที่สร้างขึ้นมาเก็บค่าparentของy
      
      x.right = z.left;//ให้ทางขวาของxชี้ไปที่nodeทางซ้ายของz
        if(x.right != null)
        //ถ้า x ทางขวามีตัวที่ชี้ไปอยู่
          x.right.parent = x;//ก็ให้ตัวที่xชี้ไป ชี้กลับมาที่x
        z.left = x;//ให้ทางซ้ายของzชี้ไปที่x
        
          if(y != null)
          //ถ้า y ที่รับมาไม่ใช่null
          {
              if(y.right == x)
                  y.right = z;
                  //ถ้าทางขวาของyเป็นxให้เปลี่ยนเป็นz
              else
                  y.left = z;
                  //ถ้าทางซ้ายของyเป็นxให้เปลี่ยนเป็นz
          }
          z.parent = y;//ให้parentของzชี้กลับไปที่y

      y.left = z.right;//ให้ทางซ้ายของyชี้ไปที่ทางขวาของz
      if(y.left != null)y.left.parent = y;
      //ถ้าy.leftก็คือz.rightไม่ใช่nullก็ให้parentชี้กลับมาที่y
      z.right = y;//ให้ทางขวาของzชี้ไปที่y ทีนี้zก็จะขึ้นไปอยู่บนสุดแล้ว
      y.parent = z;//ให้parentของyชี้กลับไปที่z
      if(y == root)
        root = z;
        //ถ้าyเป็นrootก็ให้zเป็นแทน
      else
      {
        if(w != null)
        {
          //หมายความว่าyไม่ใช่rootและมีตัวที่ชี้มาหาyก็คือparentของyซึ่งแทนด้วยw
            if(w.left == y)
                w.left = z;
                //ถ้าyเคยอยู่ทางซ้ายของwก็ให้zไปอยู่แทน เลยให้ทางซ้ายของwชี้ไปที่z
            else
                w.right = z;
                //ถ้าyเคยอยู่ทางขวาของwก็ให้zไปอยู่แทน เลยให้ทางขวาของwชี้ไปที่z
        }
        z.parent = w;
        //ตอนนี้zอยู่บนสุดก็ให้parentชี้กลับไปที่w
      }    
    }

    public void doubleRotateFromRight(Node y) {
        // Do something
      Node x = y.right;//ให้ x มีค่าเท่ากับnodeทางซ้ายของy
      Node z = x.left;//ให้ z มีค่าเท่ากับnodeทางขวาของx
      Node w = y.parent;//ให้node w ที่สร้างขึ้นมาเก็บค่าparentของy
      
      x.left = z.right;//ให้ทางซ้ายของxชี้ไปที่nodeทางขวาของz
        if(x.left != null)//ถ้า x ทางซ้ายมีตัวที่ชี้ไปอยู่
          x.left.parent = x;//ก็ให้ตัวที่xชี้ไป ให้parentชี้กลับมาที่x
        z.right = x;//ให้ทางขวาของzชี้ไปที่x
        
          if(y != null)//ถ้า y ที่รับมาไม่ใช่null
          {
              if(y.left == x)
                  y.left = z;//ถ้าทางซ้ายของyเป็นxให้เปลี่ยนเป็นz
              else
                  y.right = z;//ถ้าทางขวาของyเป็นxให้เปลี่ยนเป็นz
          }
          z.parent = y;//ให้parentของzชี้กลับไปที่y

      y.right = z.left;//ให้ทางขวาของyชี้ไปที่ทางซ้ายของz
      if(y.right != null)
        y.right.parent = y;//ถ้าy.rightก็คือz.leftไม่ใช่nullก็ให้parentชี้กลับมาที่y
      z.left = y;//แล้วก็ให้ทางซ้ายของzชี้มาที่y
      y.parent = z;//ให้parentของyชี้กลับไปที่z
      if(y == root)
        root = z;
        //ถ้าyเป็นrootก็ให้zเป็นแทน
      else
      {
        if(w != null)//หมายความว่าyไม่ใช่rootและมีตัวที่ชี้มาหาyก็คือparentของyซึ่งแทนด้วยw
        {
            if(w.right == y)
                w.right = z;//ถ้าyเคยอยู่ทางขวาของwก็ให้zไปอยู่แทน เลยให้ทางขวาของwชี้ไปที่z
            else
                w.left = z;//ถ้าyเคยอยู่ทางซ้ายของwก็ให้zไปอยู่แทน เลยให้ทางซ้ายของwชี้ไปที่z
        }
        z.parent = w;//ให้parentของzชี้กลับไปที่w
      }  

    }
    
    public void insertKey(int key) {
        if (root == null) {
            root = new Node(key);
        } else {
            Main.insertKey(root, key);
        }
    }
    
    public void printTree() {
        if (root == null) {
            System.out.println("Empty tree!!!");
        } else {
            super.printTree(root);
        }
    }

    public Node findKey(int search_key) {
        return Main.findKey(root, search_key);
    }
}
