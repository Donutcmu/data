public class Tree extends BTreePrinter{ // Fix this
  Node root;
  
  public Tree(Node root){
      this.root = root;
  }
  
  public Tree(){} // Dummy constructor (No need to edit)

  
  public void printTree(){
      // Pls use codes from the previous problem
      if(root != null)
        super.printTree(root);
      else
        System.out.println("Empty tree!!!");
  }

  public Node findKey(int search_key){
      // Pls use codes from the previous problem
      Node current = root;
      return findKey(current,search_key);
  }
  
  public static Node findKey(Node node, int search_key){
      // Pls use codes from the previous problem
      if(node == null) 
      {
          return null;
      }
      
      if(node.key == search_key) 
      {
          return node;
      }
      if(node.key > search_key)  
      {
          return findKey(node.left, search_key);
      } 
      else
      {
          return findKey(node.right, search_key);
      }
  }

  public static Node findMin(Node node){
      // Pls use codes from the previous problem
      if(node.left != null)
        {
            return findMin(node.left);
        }
      else
      {
          return node;
      }
  }
  
  
  // This function is for deleting the root node
  // If the node is not the root, please call the recursive version
  public void deleteKey(int key) {
      // There should be 6 cases here
      // Non-root nodes should be forwarded to the static function
    if (root == null) 
    {
        System.out.println("Empty Tree!!!");
        return;
    }
  
      Node node = findKey(key); 
    if (node == null) 
    {
        System.out.println("Key not found!!!");
        return; 
    }

    
    // If the node to delete is the root
    if (node == root) 
    {
        if (root.left == null && root.right == null) 
        {
            root = null;
        }
        else if (root.left != null && root.right == null) 
        {
            root = root.left;
            root.parent = null;
        }
        else if (root.right != null && root.left == null) 
        {
            root = root.right;
            root.parent = null;
        }
        else 
        {
            Node minNode = findMin(root.right); 
            root.key = minNode.key; 
            deleteKey(minNode);  
        }
    } 
    else 
    {
        deleteKey(node);
    }
  }
  
  // Use this function to delete non-root nodes
  public static void deleteKey(Node node){
      // There should be 7 cases here
      if (node.left == null && node.right == null) 
      {
        if (node == node.parent.left) 
        {
            node.parent.left = null; 
        } 
        else 
        {
            node.parent.right = null; 
        }
      }
      else if (node.left != null && node.right == null) 
      {
          if (node == node.parent.left) 
          {
              node.parent.left = node.left; 
          } 
          else 
          {
              node.parent.right = node.left;
          }
          node.left.parent = node.parent;
      }
      else if (node.right != null && node.left == null) 
      {
          if (node == node.parent.left) 
          {
              node.parent.left = node.right; 
          } 
          else 
          {
              node.parent.right = node.right;
          }
          node.right.parent = node.parent;
      }
      else 
      {
          Node minNode = findMin(node.right);
          node.key = minNode.key;
          deleteKey(minNode);
      }
  }
  
}
