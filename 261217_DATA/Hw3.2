public class DoublyLinkedList {
    Node head;
    Node tail;
    String listName;
    
    public DoublyLinkedList(String name){
        //START FIX HERE
        listName = name;
        //END FIX HERE
        //เริ่มจากสร้างconstructorโดยกำหนดชื่อของ list ด้วยinputค่าname
    }
    
    public void PopTail() {
        //ฟังก์ชันนี้้ทำหน้าที่ลบnodeที่อยู่หลังสุดของlist
        //START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
            //ถ้าlistนี้เป็นlistเปล่าให้print ERROR
        }else {
            if(tail == head){
                head = null;
                tail = null;
                    //  ถ้าlist มีnode เดียวให้ก็จะลบnodeนั้นออก
            }else{
                tail = tail.previous;
                tail.next = null;  
                //ถ้าlist มีหลายnode จะให้nodeก่อนตัวสุดท้ายกลายเป็นtailแทน จากนั้นลบtail.next ก็คือลบตัวสุดท้ายจริงๆออก 
            }
            
        }
        //END FIX HERE
    }
    
    public void PopHead(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
                //ถ้าlistนี้เป็นlist ว่าง จะprint ERRORออกมา
        }else {
            head = head.next;
            head.previous = null;
            //ถ้าlistนี้ไม่ใช่list ว่าง จะให้headไปชี้ที่ตัวถัดไปแล้วลบข้อมูลheadจริงๆก็คือตัวแรกออก
        }
        //END FIX HERE
    }
    
    public Node GetHead(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        else {
            return head;
            //ถ้าlistนี้ไม่ใช่list ว่างแล้ว จะreturn ค่าตัวแรกของ list ออกไป
        }
        //END FIX HERE
    }
    
    public Node GetTail(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        else {
			return tail;
            //ถ้าlistนี้ไม่ใช่list ว่างแล้ว จะreturn ค่าตัวสุดท้ายของ list ออกไป
        }
        //END FIX HERE
    }
    
    public void PushHead(Node node){
        //START FIX HERE
        if (IsEmpty()) {
            head = node;
            tail = node;
            //ถ้าlist นี้เป็นlist ว่างnodeที่รับเข้ามาจะเป็นnodeเพียงตัวเดียว ทำให้เราต้องชี้head & tailให้กับมัน
        }
        else {
            node.next = head;
            head.previous = node;
            head = node;
            //เราจะขยับจากข้างหน้าโดยให้ตัวถัดไปเป็นhead จากนั้นให้ตัวข้างหน้าhead = node แล้วให้node = head เท่านี้ก็ได้head ตัวใหม่พร้อมกับnodeใหม่
        }
        //END FIX HERE
    }
    
    public void PushTail(Node node) {
        //START FIX HERE
        if (IsEmpty()) {
            head = node;
            tail = node;
        }
        else {
            tail.next = node;
            node.previous = tail;
            tail = node;
            //เราจะเติมnodeใหม่ไปที่tailจากนั้น ให้node ก่อนหน้า = tail เราจะได้node.previousมา จากนั้นเซ็ตnodeให้เป็นtail
        }
        //END FIX HERE
    }

    public Node FindNode(int id){
        //START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            while(current != null){
                if(current.heroId == id){
                    return current;
                }
                current = current.next;
            }
            return new Node("Hero Not Found!");
            //ให้ node current เป็นตัวแรกจากนั้นเราจะไล่หาnodeที่มีherIid=ตัวที่เราต้องการถ้าหาเจอเราก็จะreturnตัวนั้น ถ้าไม่เจอจะreturn node ใหม่โดยมีerror messageว่าhero no found

        }
        //END FIX HERE
    }
    
    public Node EraseNode(int id){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        Node current = head;
        while(current != null){
            if(current.heroId == id){
                if(current == head){
                    head = current.next;
                    current.next.previous = null;
                    //ถ้าเราเจอว่าheroId ตรงกับnode head เราจะให้head เป็นnodeถัดไป จ่กนั้นลบnodeนี้ออก
                }else if(current == tail){
                    tail = current.previous;
                    current.previous.next = null;
                    //ถ้าเราเจอว่าheroId ตรงกับnode tail เราจะเลื่อนnode tail ให้เป็นnodeก่อนหน้า จากนั้นลบnodeนี้ออก
                }else{
                    current.previous.next = current.next;
                    current.next.previous = current.previous;
                    //ถ้าnode นี้ไม่ใช่ทั้งhead และtail แล้วเราจะเชื่อมnodeก่อนหน้าและnodeถัดไปเข้าด้วยกันแล้วลบnodeที่เราต้องการออก
                }
                return current;
                //return nodeนี้ออกไป
            }
            current = current.next;
            //เลื่อนไปnodeถัดไปเพื่อให้nodeไม่อยู่ที่เดิม
        }
        return new Node("Hero Not Found!");
        //ถ้าหาไม่เจอจะreturn new node โดยมีerror message ว่าHero Not Found!
        
        //END FIX HERE
    }
    
    public void AddNodeAfter(Node node1, Node node2){
        //START FIX HERE
        if(node1.next != null){
            node1.next.previous = node2;
            //ถ้าตัวถัดไปของnode1ไม่ใช้null ก็คือnode1ไม่ใช่ตัวสุดท้าย เราจะกำหนดให้nodeตัวถัดไปของnode1 ให้มีnode previous = node2 
            //ก็คือแทรกค่าระหว่างnode1และnodeถัดไปของnode1 ด้วย node2
        }else {
            tail = node2;
            //ถ้าnode1เป็นtail ก็เติมnode2 เข้าไปได้เลย
        }       
        //เซ็ตค่าnode2
        node2.next = node1.next;
        node1.next = node2;
        node2.previous = node1;
        //เราจะกำหนดnode2.next= node1.nextเพื่อที่ตัวถัดไปของnode1 จะกลายเป็นตัวถัดไปของnode2
        //แล้วให้ตัวที่อยู่หลังnode1มีค่าก่อนหน้าเป็น node2
        //จากนั้นก็ให้previousของnode2เป็น node1
        //END FIX HERE
        
    }
    
    public void AddNodeBefore(Node node1, Node node2){
        //START FIX HERE
        if(node1.previous != null){
            node1.previous.next = node2;
            //ถ้าnodeนี้ไม่ใช่head แล้วเอาnode2ไปไว้ข้างหน้าnode1
        }else {
            head = node2;
            //ถ้าnode1เป็นheadแล้วเราจะให้node2เป็นheadแทน
        }
        //เซ็ตค่าnode2
        node2.previous = node1.previous;
        //ให้ตัวก่อนหน้าnode1 เป็นตัวก่อนหน้าnode2 nodeจะได้เชื่อมกัน
        node1.previous = node2;
        //เซ็ตค่าให้ node ก่อนหน้าnode1เป็นnode2
        node2.next = node1;
        //เซ็ตให้nodeถัดไปของnode2เป็นnode1

        //END FIX HERE
    }
    
    public boolean IsEmpty(){
        //START FIX HERE
        if(head == null){
            return true;
        }else return false;
        //เช็คดูว่าlistนี้เป็นlistว่างรึป่าว
        //END FIX HERE
    }
    public void Merge(DoublyLinkedList list){
        //START FIX HERE
        if (list.IsEmpty()) return;
            //เช็คดูว่า list ว่างรึป่าว
        tail.next = list.head;
        //เอาlist ที่รับเข้ามาใหม่มาต่อหาง
        list.head.previous = tail;
        //เชื่อมlistโดยการให้ตัวก่อนหน้าของnode head ตัวใหม่ เชื่อมไปยังหางตัวเก่า
        tail = list.tail;
        //กำหนดtail ให้เป็นหางตัวใหม่เราก็จะได้tailไปชี้ที่ตัวท้ายสุดแล้ว

        //END FIX HERE
    }
    
    public void PrintStructure(){
        //START FIX HERE
        System.out.print(listName + ": head <-> ");
        Node current = head;
        while( current != null){
            System.out.print("{" + current.heroId + "} <-> ");
            current = current.next;
        }
        
        System.out.println("tail");
        //END FIX HERE
        //ฟังก์ชันนี้ จะprint list ทุกตัวออกมา
    }
    
    // This may be useful for you for implementing printStructure()
    public void PrintStructureTailward(){ 
        Node current=tail;
        System.out.print(listName + ": tail <-> ");
        while(current!=null){
            System.out.print("{" + current.heroId + "} <-> ");
            current = current.previous;
        }
        System.out.println("head");
    }
    
    public Node GetHighestHPHero(){
        //START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            Node highest = head;
            while(current != null){
                if(current.hp > highest.hp){
                   highest = current; 
                }
                current = current.next;
                //ลูปหาnodeที่มีhero มีhpมากที่สุด โดยจะเก็บค่าตัวที่มีค่าสูงที่สุดไว้ใน Node highest
            }
            return highest;
            //return node ที่มีhpสูงสุดออกมา
        }
        //END FIX HERE
    }
    public double GetMiddleHP(){
        //START FIX HERE
        Node current = head;
        int count = 0;
        while(current != null){
            count++;
            current = current.next;
        }
        //เริ่มจากลูปหาจำนวนnodeในlist
        count = count/2;
        current = head;
        for(int i=0 ; i<count ; i++){
            current = current.next;
            //ลูปให้currentไปเป็นnodeที่เราต้องการ
        }
        return current.hp;
        //END FIX HERE
    }
    public void PrintHeroWithType(Attribute att){
        if (IsEmpty()){
            System.out.println("Empty List!");
            return;
        }
        //START FIX HERE
        Node current = tail;
        //เรื่มจากหาง
        int n = 0;
        while(current != null){
            if(current.att == att){
                n++;
            }
            current = current.previous;
            //ลูปlist จากtail มาhead ถ้าเจอตัวที่attตรง n จะบวก1
        }
        if(n == 0){
            System.out.println("There is no hero with this attribute");
            //ไม่มีตัวที่ตรงเลย
        }else if(n == 1){
            System.out.printf("Print Hero With This Attribute: %s has %d hero\n",att, n);
            //มี1ตัวที่ตรง
        }else {
            System.out.printf("Print Hero With This Attribute: %s has %d heroes\n",att, n);
        }
        
        current = head;
        int count = n;
        while(current != null){
            if(current.att == att){
                System.out.printf(count + ". HeroID: " + current.heroId +
                                          " , Name: " + current.name + 
                                          " , HP: " + current.hp +
                                          ", Attribute: " + current.att + "\n");
                count--;
            }
            current = current.next;
            //ลูปหาตัวที่มี att ตรง เมื่อเจอแล้วจะprintข้อมูลออกมา แล้วทำการลบ countออก 1ตัวเมื่อเจอตัวที่ตรง1ตัว
        }
        //END FIX HERE
    }
}