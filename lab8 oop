import java.util.*;

public class MySet {
    public static class Myset<E extends Comparable<E>> implements Set<E> {
        private final HashMap<E, Object> map = new HashMap<>();
        private static final Object a = new Object();

        @Override
        public int size() {
            return map.size();
        }

        @Override
        public boolean isEmpty() {
            return map.isEmpty();
        }

        @Override
        public boolean contains(Object o) {
            return map.containsKey(o);
        }

        @Override
        public Iterator<E> iterator() {
            return map.keySet().iterator();
        }

        @Override
        public Object[] toArray() {
            return map.keySet().toArray();
        }

        @Override
        public <T> T[] toArray(T[] array) {
            return map.keySet().toArray(array);
        }

        @Override
        public boolean add(E e) {
            return map.put(e, a) == null;
        }

        @Override
        public boolean remove(Object o) {
            return map.remove(o) == a;
        }

        @Override
        public boolean containsAll(Collection<?> c) {
            for (Object o : c) {
                if (!contains(o)) {
                    return false;
                }
            }
            return true;
        }

        @Override
        public boolean addAll(Collection<? extends E> c) {
            boolean modified = false;
            for (E e : c) {
                if (add(e)) {
                    modified = true;
                }
            }
            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> c) {
            boolean modified = false;
            Iterator<E> iterator = iterator();
            while (iterator.hasNext()) {
                E e = iterator.next();
                if (!c.contains(e)) {
                    iterator.remove();
                    modified = true;
                }
            }
            return modified;
        }

        @Override
        public boolean removeAll(Collection<?> c) {
            boolean modified = false;
            for (Object o : c) {
                if (remove(o)) {
                    modified = true;
                }
            }
            return modified;
        }

        @Override
        public void clear() {
            map.clear();
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Set)) return false;
            Set<?> otherSet = (Set<?>) o;
            return this.map.keySet().equals(otherSet);
        }

        @Override
        public int hashCode() {
            return map.keySet().hashCode();
        }

        @Override
        public String toString() {
            List<E> sortedList = new ArrayList<>(map.keySet());
            sortedList.sort(Comparator.naturalOrder());
            return sortedList.toString();
        }
    }

    public static <E extends Comparable<E>> Comparator<Set<E>> setComparator() {
        return (set1, set2) -> {
            List<E> sortedSet1 = new ArrayList<>(set1);
            List<E> sortedSet2 = new ArrayList<>(set2);

            sortedSet1.sort(Comparator.naturalOrder());
            sortedSet2.sort(Comparator.naturalOrder());

            int sizeComparison = Integer.compare(set1.size(), set2.size());
            if (sizeComparison != 0) {
                return sizeComparison;
            }

            Iterator<E> it1 = sortedSet1.iterator();
            Iterator<E> it2 = sortedSet2.iterator();
            while (it1.hasNext() && it2.hasNext()) {
                int comparison = it1.next().compareTo(it2.next());
                if (comparison != 0) {
                    return comparison;
                }
            }
            return 0;
        };
    }
}
