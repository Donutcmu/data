public class Heap {
  private Node[] heap;
  private int size;
  private int capacity;
  private boolean isMinHeap;
  private String name;
  private long timer;

  public Heap(boolean isMinHeap, int capacity, String name) {
      // Initialize the heap here
      // Don't forget that we will build the binary heap using...
      // ... the concept of "Complete binary tree based on the heapay implementation"
      // ... The 0 index will not be used, The index starts from 1 (remember?)
      this.heap = new Node[capacity + 1];
      //เราต้องให้capacity+1เพราะว่า เราจะไม่ใช่array ช่องแรก
      this.size = 0;
      //สร้างsizeมาบอกจำนวนข้อมูลที่มีในarray
      this.capacity = capacity;
      //กำหนดความจุ
      this.isMinHeap = isMinHeap;
      //รับค่าเข้ามาว่าเป็นMinHeapหรือMaxHeap
      this.name = name;
      //กำหนดชื่อ
      this.timer = 0;
      //เก็บเวลา

     
  }

  public Node top(){
    if(size > 0)
    {
       return this.heap[1]; 
       //ถ้าในarray มีข้อมูลอยู่ ให้return ตัวแรกในarray ซึ่งจะอยู๋ในตำแหน่งที่ 1
    }
    else
    {
        return null;
        //ถ้าในarray ไม่มีข้อมูลอยู่ return null
    }
     // FIX THIS
  }

  public void push(Node node){
      // Increase timer each time you push something into the Queue
      timer++;
      node.timestamp = timer; // Stamp the time number to the node
      
      // To do:
      // 1. Push the new node at the end of the array (via back pointer)
      // 2. Sift (percolate) it up the heap
      //      * Check priority of the current node with its parent
      //      * Swap the current node if the priority is higher than the parent
      //      * Repeat the process until reaching the root or there is no swap (Pls use while loop)
      // 3. Increase the heap size
      size++;//เนื่องจากเมื่อเริ่มต้นสร้างarray sizeจะชี้อยู่ที่index 0
      this.heap[size] = node;
      //ใส่nodeที่รับมาเข้าไปในarray
      
      int currentSize = size;
      //สร้างตัวแปรมาใข้ในการทำลูป
      while(currentSize > 1)
      {
          if(heap[currentSize].compare(heap[currentSize/2], isMinHeap))
          {
              swap(currentSize,currentSize/2);
              currentSize = currentSize / 2;
              //ถ้าค่าที่รับมาใหม่มีค่าน้อยกว่าparentซึ่งตำแหน่งจะเท่ากับsizeให้ทำการสลับ
          }
          else
          {
              break;
              //เมื่อไปถึงarray ตำแหน่งที่น้อยที่สุดที่ไปได้แล้วให้หยุด
          }
      }
    
  }

  public Node pop(){
      
      // To do:
      // 1. Mark the root for return (Don't forget to return this node)
      // 2. Move the last node to the root (change pointer, set null)
      // 3. Decrease the heap size
      // 4. Sift (percolate) it down the heap
      //      * Check priority of the current node with both children
      //      * Swap the current node if the priority is lower than child
      //      * Repeat the process until the node has no child or there is no swap (Pls use while loop)
    if (size == 0) 
    {
        return null;
        //ถ้าในarrayไม่มี ใครอยู่ให้ return null
    }

    Node root = this.heap[1];
    //สร้างnode root ชึ้นมาเพื่อเก็บ array ตำแหน่งที่ 1 ซึงก็คือ root node
    this.heap[1] = this.heap[size];
    //เอาตัวที่อยู่ท้ายสุดมาแทนroot node;
    size--;
    //ลดsize ให้ไปชี้arrayก่อนหน้า

    int currentSize = 1;
    //สร้างตัวแปรมาเพื่อใช้ในการวนลูป
    while (currentSize * 2 <= size) 
    {   

        Node current = this.heap[currentSize];
        //สร้าง  Node current มาเก็บnode ที่sizeชี้อยู่
        Node left = this.heap[currentSize * 2];
        //เก็บค่าnodeลูกทางซ้าย
        Node right = this.heap[currentSize * 2 + 1];
        //เก็บค่าnodeลูกทางขวา

        if(right == null) 
        {
            //ถ้าทางขวาไม่มีลูกอยู่
            if (left.compare(current, isMinHeap)) 
            {
                //จะเปรียบเทียบกับลูกทางซ้ายแทน
                swap(currentSize, currentSize * 2);
                //ถ้าลูกทางซ้ายมีค่าน้อยกว่าให้สลับลงไป
                currentSize = currentSize * 2;
                //เปลี่ยนตำแหน่งที่ใช้ชี้
            } 
            else 
            {
                break; 
                //ถ้าทางซ้ายก็ไม่มีแปลว่าอยู่ถูกที่แล้ว
                //ไม่มีที่ให้สลับลงไปแล้ว
            }
        }
        else 
        {
            Node lesserNode;
            int lesserSize;
            //สร้างnodeและตัวแปร มาเก็บnodeที่มีค่าน้อยกว่า

            if (left.compare(right, isMinHeap)) 
            {
                //เปรียบเทียบลูกทางซ้ายกับทางขวา
                lesserNode = left;
                //ถ้าทางซ้ายน้อยกว่าทางขวาให้ไปทางซ้าย
                lesserSize = currentSize * 2;
                //ลงไปทางลูกอีก1ชั้น
            } 
            else 
            {
                lesserNode = right;
                //ทางขวาน้อยกว่าให้ไปทางขวา
                lesserSize = currentSize * 2 + 1;
                //ลงไปทางลูกอีก1ชั้น
            }

            if (lesserNode.compare(current, isMinHeap)) 
            {
                swap(currentSize, lesserSize);
                //เปรียบเทียบ node current กับ node lesserSize
                currentSize = lesserSize;
                //ถ้าcurrent size < lesserSize ให้สลับ
            } 
            else 
            {
                break;
            }
        }
    }
    

    return root; // FIX THIS

  }

  private void swap(int i, int j) {
      Node temp = heap[i];
      heap[i] = heap[j];
      heap[j] = temp;
  }

  public void printArray() {
        // No need to fix this function
        System.out.printf("-----------------\n%s Heap:\n", name);
        if (isEmpty()) System.out.print("Empty Heap");
        for (int i = 1; i <= size; i++) {
            System.out.printf("%d] %s\n", i, heap[i].toString());
        }
        System.out.print("-----------------\n");
    }

  public boolean isEmpty() {
      return size == 0;
  }
}
