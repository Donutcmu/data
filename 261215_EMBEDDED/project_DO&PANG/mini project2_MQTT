#include <WiFi.h>
#include <MQTT.h>

//รายละเอียดคือกดปุ่มละมอเตอร์หมุนไป 1/4 และทำงานผ่านmqtt โดยให้กดปุ่มผ่านmqttได้และเมื่อกดปุ่มบดบอร์ดก็จะส่งว่าทำงานแล่้วกลับไปด้วย

const char ssid[] = "@JumboPlusIoT";
const char pass[] = "m11xa0xb";

const char mqtt_broker[] = "test.mosquitto.org";
const char mqtt_topic[] = "group89/command";
const char mqtt_client_id[] = "clientId-Vh8B8PNJxu"; // must change this string to a unique value
int MQTT_PORT = 1883;

#define buttonpin 32
#define LED 18
#define STEPPER_PIN_1 16
#define STEPPER_PIN_2 17
#define STEPPER_PIN_3 18
#define STEPPER_PIN_4 19

int step_number = 0;
int buttonState = 0;   
int lastButtonState = 0;  
int stage = 0;         // Stage variable to control rotation steps

const int stepsPer90Degree = 512;

WiFiClient net;
MQTTClient client;

bool ledState = LOW;

void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect(mqtt_client_id)) {  
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  client.subscribe(mqtt_topic);
}

void messageReceived(String &topic, String &payload) {
  Serial.println("incoming: " + topic + " - " + payload);

  // Update LED state based on payload
  if (payload == "on") {
    ledState = HIGH;
    digitalWrite(LED, HIGH);
  } else if (payload == "off") {
    ledState = LOW;
    digitalWrite(LED, LOW);
  }
}

void setup() {

  Serial.begin(9600);
  WiFi.begin(ssid, pass);

  pinMode(STEPPER_PIN_1, OUTPUT);
  pinMode(STEPPER_PIN_2, OUTPUT);
  pinMode(STEPPER_PIN_3, OUTPUT);
  pinMode(STEPPER_PIN_4, OUTPUT);
  pinMode(buttonpin, INPUT);

  pinMode(buttonpin, INPUT_PULLUP);
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW); // Turn off LED initially

  client.begin(mqtt_broker, MQTT_PORT, net);
  client.onMessage(messageReceived);

  connect();
}

void loop() {
  client.loop();
  delay(10);  // fixes some issues with WiFi stability
  buttonState = digitalRead(buttonpin);
  if (!client.connected()) {
    connect();
  }

  // Send message when button is pressed
  if (digitalRead(buttonpin) == LOW) {
    client.publish(mqtt_topic, "Button Pressed");
    Serial.println("Button Pressed");
    delay(200); // debounce
  }

  if (buttonState == HIGH && lastButtonState == LOW) {
    // Debounce delay to avoid multiple presses
    delay(50);
    
    // Increment the stage and reset after stage 3
    stage++;
    if (stage > 3) {
      stage = 0;
    }

    // Rotate motor by the appropriate number of steps
    rotateToStage(stage);

    // Print the current stage for debugging
    Serial.print("Stage: ");
    
    Serial.println(stage);
  }

  // Save the current button state for the next loop
  lastButtonState = buttonState;

}

void rotateToStage(int stage) {

  // Rotate the motor by the calculated number of steps
  for (int i = 0; i < stepsPer90Degree; i++) {
    OneStep(true);  // Rotate in the forward direction
    delay(2);       // Adjust delay for motor speed
  }
  stage++;
  if (stage > 3) {
    stage = 0;  // Reset to stage 0 after reaching stage 3
  }
}

// Function to control the stepper motor by one step
void OneStep(bool dir) {
  if (dir) {
    switch (step_number) {
      case 0:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
    }
  } else {
    switch (step_number) {
      case 0:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, HIGH);
        break;
      case 1:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, HIGH);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 2:
        digitalWrite(STEPPER_PIN_1, LOW);
        digitalWrite(STEPPER_PIN_2, HIGH);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
      case 3:
        digitalWrite(STEPPER_PIN_1, HIGH);
        digitalWrite(STEPPER_PIN_2, LOW);
        digitalWrite(STEPPER_PIN_3, LOW);
        digitalWrite(STEPPER_PIN_4, LOW);
        break;
    }
  }

  step_number++;
  if (step_number > 3) {
    step_number = 0;
  }
}
